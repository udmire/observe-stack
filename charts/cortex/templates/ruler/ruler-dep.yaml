{{- if .Values.ruler.enabled -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "cortex.rulerFullname" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "cortex.rulerLabels" . | nindent 4 }}
    app.kubernetes.io/part-of: memberlist
  annotations:
    {{- toYaml .Values.ruler.annotations | nindent 4 }}
spec:
  replicas: {{ .Values.ruler.replicas }}
  selector:
    matchLabels:
      {{- include "cortex.rulerSelectorLabels" . | nindent 6 }}
  strategy:
    {{- toYaml .Values.ruler.strategy | nindent 4 }}
  template:
    metadata:
      labels:
        {{- include "cortex.rulerLabels" . | nindent 8 }}
        app.kubernetes.io/part-of: memberlist
        {{- with .Values.ruler.podLabels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      annotations:
        checksum/config: {{ include "cortex.configChecksum" . }}
      {{- with .Values.ruler.podAnnotations }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
    spec:
      serviceAccountName: {{ .Values.ruler.serviceAccount.name | default (include "cortex.serviceAccountName" . ) }}
    {{- if .Values.ruler.priorityClassName }}
      priorityClassName: {{ .Values.ruler.priorityClassName }}
    {{- end }}
      {{- if .Values.ruler.securityContext.enabled }}
      securityContext: {{- omit .Values.ruler.securityContext "enabled" | toYaml | nindent 8 }}
      {{- end }}
      initContainers:
        {{- toYaml .Values.ruler.initContainers | nindent 8 }}
      {{- if .Values.image.pullSecrets }}
      imagePullSecrets:
      {{- range .Values.image.pullSecrets }}
        - name: {{ . }}
      {{- end }}
      {{- end }}
      containers:
        - name: rules
          image: "{{ .Values.image.repository }}:{{ default .Chart.AppVersion .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          args:
            - "-target=ruler"
            - "-config.file=/etc/cortex/cortex.yaml"
            {{- if not .Values.config.ruler.alertmanager_url }}
              {{- if .Values.config.ruler.enable_alertmanager_discovery }}
            - "-ruler.alertmanager-url=http://_http-metrics._tcp.{{ template "cortex.name" . }}-alertmanager-headless.{{ .Release.Namespace }}.svc.{{ .Values.clusterDomain }}/api/prom/alertmanager/"
              {{- else }}
            - "-ruler.alertmanager-url=http://{{ template "cortex.alertmanagerFullname" . }}.{{ .Release.Namespace }}.svc.{{ .Values.clusterDomain }}:{{ .Values.config.server.http_listen_port }}/api/prom/alertmanager/"
              {{- end }}
            {{- end }}
            {{- include "cortex.memcached" . | nindent 12}}
            {{- if .Values.minio.enabled }}
            - -blocks-storage.backend=s3
            - -blocks-storage.s3.endpoint={{ .Release.Name }}-minio.{{ .Release.Namespace }}.svc.{{ .Values.clusterDomain }}:9000
            {{- with (index .Values.minio.buckets 0) }}
            - -blocks-storage.s3.bucket-name={{ .name }}
            {{- end }}
            - -blocks-storage.s3.access-key-id={{ .Values.minio.accessKey }}
            - -blocks-storage.s3.secret-access-key={{ .Values.minio.secretKey }}
            - -blocks-storage.s3.insecure=true
            - -ruler-storage.backend=s3
            - -ruler-storage.s3.endpoint={{ .Release.Name }}-minio.{{ .Release.Namespace }}.svc.{{ .Values.clusterDomain }}:9000
            {{- with (index .Values.minio.buckets 1) }}
            - -ruler-storage.s3.bucket-name={{ .name }}
            {{- end }}
            - -ruler-storage.s3.access-key-id={{ .Values.minio.accessKey }}
            - -ruler-storage.s3.secret-access-key={{ .Values.minio.secretKey }}
            - -ruler-storage.s3.insecure=true
            {{- end }}
          {{- range $key, $value := .Values.ruler.extraArgs }}
            - "-{{ $key }}={{ $value }}"
          {{- end }}
          volumeMounts:
            {{- if .Values.ruler.extraVolumeMounts }}
            {{- toYaml .Values.ruler.extraVolumeMounts | nindent 12}}
            {{- end }}
            - name: config
              mountPath: /etc/cortex
            - name: runtime-config
              mountPath: /etc/cortex/runtime
            - name: storage
              mountPath: /data
            - name: tmp
              mountPath: /rules
          ports:
            - name: http-metrics
              containerPort: {{ .Values.config.server.http_listen_port }}
              protocol: TCP
            - name: gossip
              containerPort: {{ .Values.config.memberlist.bind_port }}
              protocol: TCP
          startupProbe:
            {{- toYaml .Values.ruler.startupProbe | nindent 12 }}
          livenessProbe:
            {{- toYaml .Values.ruler.livenessProbe | nindent 12 }}
          readinessProbe:
            {{- toYaml .Values.ruler.readinessProbe | nindent 12 }}
          resources:
            {{- toYaml .Values.ruler.resources | nindent 12 }}
          {{- if .Values.ruler.containerSecurityContext.enabled }}
          securityContext: {{- omit .Values.ruler.containerSecurityContext "enabled" | toYaml | nindent 12 }}
          {{- end }}
          {{- if .Values.ruler.env }}
          env:
            {{- toYaml .Values.ruler.env | nindent 12 }}
          {{- end }}
        {{- if .Values.ruler.extraContainers }}
        {{- toYaml .Values.ruler.extraContainers | nindent 8}}
        {{- end }}
      nodeSelector:
        {{- toYaml .Values.ruler.nodeSelector | nindent 8 }}
      affinity:
        {{- toYaml .Values.ruler.affinity | nindent 8 }}
      tolerations:
        {{- toYaml .Values.ruler.tolerations | nindent 8 }}
      terminationGracePeriodSeconds: {{ .Values.ruler.terminationGracePeriodSeconds }}
      volumes:
        {{- include "cortex.configVolume" . | nindent 8 }}
        - name: runtime-config
          configMap:
            name: {{ template "cortex.fullname" . }}-runtime-config
        - name: tmp
          emptyDir: {}
        - name: storage
          emptyDir: {}
        {{- if .Values.ruler.extraVolumes }}
        {{- toYaml .Values.ruler.extraVolumes | nindent 8}}
        {{- end }}
{{- end }}
